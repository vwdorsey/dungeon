Assignment 1.08 - Parsing Object Definitions

Monday, 4/6
	
	- Started the assignment by creating necessary structs, attributes, and function headers for 1.08
		- Created the struct obj_template
			- It contains all the information fields for 1.08
			- It should match the specification

	- Worked on checking the 1.07 code, which it's based on, for memory leaks
		- Turns out that there was a memory leak related to the new objects
			-Basically, the program would create objects, but was unable to delete them
			-Spent around 2-3 hours working on this.
		- This issue has been fixed for the 1.07 code
			- Problem was that I created objects vs pointers to objects
			- Pointers are easy to delete/free, objects arent
			- Trying to delete said objects would cause Seg. Faults
			- Fixed by changing all objects to pointers to new objects
			- This fixed all the leaks.
	- Copied 1.07 code and modified it to work for objects.
		- Changed all references of mon_template to obj_template
		- Changed the monster attribute code to the object type
			- Also created a block of attributes in values.hpp for all the item types to make for easier config
			- This is discussed better in the readme.
		- Reordered all variables to match the specification
		- Reordered output_obj_defs to try and match the order of the list in the specification
			- Had to add tags to the values, otherwise they don't make any sense
			- It makes it look like they were printed from the file, but they are actually stored
				- Please check the code if you have doubts.

Tuesday, 4/7

	- Fixed more memory leak problems
		- There were some issues related to the 1.07 code that got passed on to the new 1.08 code
			- Applying the fixes in 1.07 to 1.08 fixed everything.
	- Changed argument parameters for this project only
		- Pre 1.07 code will run given one argument to the program
		- 1.07 code will run given two arguments to the program
		- 1.08 code executes when no arguments are given to the program
	- Implemented more field error checking 
		- Program will now check to make sure that all fields are filled correctly
			- This is basically done by checking if the field is null/empty
			- If they aren't, the object is tossed
		- Program will also reject data if proper headers aren't detected.
			- If the RLG229 OBJECT DECRIPTION <version> line isn't read, the whole file is ignored.
			- If the BEGIN OBJECT is missing, it will ignore input until the tag is found.
			- If a BEGIN OBJECT comes and no END was found, the object being constructed is tossed.
			- Else the program runs as normal.
		- Methods were tested some and seem to work normally.
			- Did have some issues at first due to bad code placement
			- Also discovered that my defs file had issues after running, but they were just typos.

4/7, 11:45pm
	- Finished Changelog and Readme, Project ended
